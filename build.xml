<?xml version="1.0"?>

<project name="MavenPortal" basedir="." default="deploy-portal-pom" xmlns:ivy="antlib:org.apache.ivy.ant">
	<!--Set to Liferay Portal directory-->
	<property name="portal.dir" value="/liferaysc/portal" />
	<property name="tomcat.dir" value="/liferaysc/tomcat/tomcat-7.0.42" />

	<property name="app.server.lib.global.dir" value="${tomcat.dir}/lib/ext" />
	<property name="app.server.lib.portal.dir" value="${tomcat.dir}/webapps/ROOT/WEB-INF/lib" />
	<property name="groupId" value="com.liferay" />
	<property name="module.dependency.list" value="" />
	<property name="module.list" value="" />
	<property name="project.dir" value="${basedir}/portal" />
	<property name="sdk.dir" value="${portal.dir}/tools/sdk" />
	<property name="version" value="1.0.0" />

	<path id="module.classpath">
		<fileset dir="${app.server.lib.global.dir}" includes="*.jar" />
		<fileset dir="${app.server.lib.portal.dir}" includes="*.jar" />
		<fileset dir="${sdk.dir}/dependencies/aQute.bnd/lib" includes="*.jar" />
		<fileset dir="${sdk.dir}/lib" includes="activation.jar,javax.servlet-api.jar,jsp-api.jar,mail.jar" />
	</path>

	<scriptdef name="parser" language="javascript">
		<attribute name="module" />
		<attribute name="splitter" />
		<attribute name="property" />
		<attribute name="extension" />
		<![CDATA[
	    var module = attributes.get("module");
	    var splitter = attributes.get("splitter");
		var index = module.lastIndexOf(splitter);
		if (index == -1) index = module.length()-1;
		project.setProperty(attributes.get("property"), module.substring(0, index));
		project.setProperty(attributes.get("extension"), module.substring(index+1, module.length()));
		]]>
	</scriptdef>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${portal.dir}/lib/development/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<macrodef name="append-ivy-dependency">
		<sequential>
			<if>
				<available file="ivytopom/${src.dir.name}/pom.xml" />
				<then>
					<loadfile srcfile="ivytopom/${src.dir.name}/pom.xml" property="dependency-set">
						<filterchain>
							<headfilter lines="-1" skip="15" />
						</filterchain>
					</loadfile>
					<if>
						<isset property="dependency-set" />
						<then>
							<replace file="portal/${src.dir.name}/pom.xml" value="${dependency-set}">
								<replacetoken><![CDATA[  </dependencies>
</project>]]></replacetoken>
							</replace>

							<var name="dependency-set" unset="true" />

							<loadfile srcfile="ivytopom/${src.dir.name}/pom.xml" property="dependency-set">
								<filterchain>
									<headfilter lines="-1" skip="14" />
								</filterchain>
							</loadfile>
							<replace file="portal/${src.dir.name}/pom.xml" value="${dependency-set}">
								<replacetoken><![CDATA[  <dependencies/>
</project>]]></replacetoken>
							</replace>
						</then>
					</if>
				</then>
			</if>

			<var name="dependency-set" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="append-module-dependency-list">
		<attribute name="dependency" />
		<attribute name="group" default="${groupId}" />
		<attribute name="version" default="${version}" />

		<sequential>
			<if>
				<equals arg1="${module.dependency.list}" arg2="" />
				<then>
					<var name="concat" value="@{group}:@{version}:@{dependency}" />
				</then>
				<else>
					<var name="concat" value="${module.dependency.list} @{group}:@{version}:@{dependency}" />
				</else>
			</if>
			<var name="module.dependency.list" value="${concat}" />
		</sequential>
	</macrodef>

	<macrodef name="append-module-list">
		<sequential>
			<if>
				<equals arg1="${module.list}" arg2="" />
				<then>
					<var name="concat" value="${src.dir.name}" />
				</then>
				<else>
					<var name="concat" value="${module.list} ${src.dir.name}" />
				</else>
			</if>
			<var name="module.list" value="${concat}" />
		</sequential>
	</macrodef>

	<macrodef name="clean-up">
		<sequential>
			<delete dir="ivytopom" quiet="true"/>
		</sequential>
	</macrodef>

	<macrodef name="compile-java">
		<sequential>
			<mkdir dir="classes" />

			<javac
				srcdir="${basedir}/src"
				destdir="${basedir}/classes"
				includeantruntime="false"
			/>
		</sequential>
	</macrodef>

	<macrodef name="deploy-module-pom">
		<attribute name="src.dir.name" />
		<attribute name="module" />

		<sequential>
			<solve-module-specific-dependencies
				src.dir.name="@{src.dir.name}"
			/>

			<java classname="CreatePOM" classpath="${basedir}/classes">
				<arg value="${groupId}" />
				<arg value="@{src.dir.name}" />
				<arg value="${version}" />
				<arg value="jar" />
				<arg value="@{src.dir.name}" />
				<arg value="@{module}" />
				<arg value="${portal.dir}" />

				<arg line="${module.dependency.list}" />
			</java>

			<var name="module.lib.classpath.convert" unset="true" />
			<var name="module.dependency.list" unset="true" />
			<var name="module.dependency.list" value="" />

			<ivy-convert />

			<append-ivy-dependency />
		</sequential>
	</macrodef>

	<macrodef name="ivy-convert">
		<sequential>
			<if>
				<available file="${src.dir}/ivy.xml" />
				<then>
					<ivy:makepom ivyfile="${src.dir}/ivy.xml" pomfile="ivytopom/${src.dir.name}/pom.xml" conf="default, internal, provided, runtime, test">
						<mapping conf="default" scope="compile" />
						<mapping conf="internal" scope="compile" />
						<mapping conf="provided" scope="provided" />
						<mapping conf="runtime" scope="runtime" />
						<mapping conf="test" scope="test" />
					</ivy:makepom>
					<xmlproperty file="ivytopom/${src.dir.name}/pom.xml" collapseAttributes="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="set-module-source-directory">
		<attribute name="module" />

		<sequential>
			<dirname property="src.dir" file="@{module}" />

			<basename property="src.dir.name" file="${src.dir}" />

			<if>
				<equals arg1="${src.dir.name}" arg2="WEB-INF" />
				<then>
					<dirname property="temp" file="${src.dir}" />

					<var name="src.dir" unset="true" />

					<dirname property="src.dir" file="${temp}" />

					<var name="temp" unset="true" />
					<var name="src.dir.name" unset="true" />

					<basename property="src.dir.name" file="${src.dir}" />
				</then>
			</if>

		</sequential>
	</macrodef>

	<macrodef name="solve-module-specific-dependencies">
		<attribute name="src.dir.name" />

		<sequential>
			<parser module="@{src.dir.name}" splitter="-" property="module.name" extension="module.extension" />

			<if>
				<or>
					<and>
						<available file="${project.dir}/${module.name}-api" type="dir" />
						<equals arg1="${module.extension}" arg2="service" />
					</and>
					<and>
						<available file="${project.dir}/${module.name}-api" type="dir" />
						<equals arg1="${module.extension}" arg2="impl" />
					</and>
				</or>
				<then>
					<append-module-dependency-list
						dependency="${module.name}-api"
					/>
				</then>
				<elseif>
					<and>
						<available file="${project.dir}/${module.name}-api" type="dir" />
						<equals arg1="${module.extension}" arg2="web" />
					</and>
					<then>
						<append-module-dependency-list
							dependency="${module.name}-api"
						/>

						<if>
							<available file="${project.dir}/${module.name}-service" type="dir" />

							<then>
								<append-module-dependency-list
								dependency="${module.name}-service"
							/>
							</then>
						</if>
					</then>
				</elseif>
				<elseif>
					<and>
						<available file="${project.dir}/${module.name}-web" type="dir" />
						<equals arg1="${module.extension}" arg2="test" />
					</and>
					<then>
						<append-module-dependency-list
							dependency="${module.name}-web"
						/>
						<append-module-dependency-list
							dependency="portal-test-internal"
						/>
					</then>
				</elseif>
			</if>

			<property file="dependencies.properties" prefix="appender." />

			<propertyselector property="appenders" match="appender\.(.*)" select="\1" />

			<for list="${appenders}" param="module.name">
				<sequential>
					<if>
						<equals arg1="@{src.dir.name}" arg2="@{module.name}" />
						<then>
							<for list="${appender.@{module.name}}" param="dependency" delimiter=";">
								<sequential>
									<append-module-dependency-list
										dependency="@{dependency}"
									/>
								</sequential>
							</for>
						</then>
					</if>
				</sequential>
			</for>

			<property file="ext-dependencies.properties" prefix="appender.ext." />

			<propertyselector property="appenders.ext" match="appender\.ext\.(.*)" select="\1" />

			<for list="${appenders.ext}" param="module.name">
				<sequential>
					<if>
						<equals arg1="@{src.dir.name}" arg2="@{module.name}" />
						<then>
							<for list="${appender.ext.@{module.name}}" param="dependency" delimiter=";">
								<sequential>
									<parser module="@{dependency}" splitter=":" property="tmp" extension="dep.artifactId" />
									<parser module="${tmp}" splitter=":" property="dep.groupId" extension="dep.version" />

									<append-module-dependency-list
										dependency="${dep.artifactId}"
										group="${dep.groupId}"
										version="${dep.version}"
									/>
								</sequential>
							</for>
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<target name="clean">
		<delete dir="portal" quiet="true" />
		<delete dir="classes" quiet="true" />
		<clean-up />
	</target>

	<target name="deploy-all-module">
		<compile-java />

		<for param="module">
			<path>
				<dirset dir="${portal.dir}">
					<include name="**/src"/>
				</dirset>
			</path>
			<sequential>
				<set-module-source-directory
					module="@{module}"
				/>

				<if>
					<available file="${src.dir}/build.xml" />
					<then>
						<mkdir dir="${project.dir}/${src.dir.name}" />

						<deploy-module-pom
							src.dir.name="${src.dir.name}"
							module="@{module}"
						/>

						<append-module-list />
					</then>
				</if>

				<var name="src.dir" unset="true" />
				<var name="src.dir.name" unset="true" />
			</sequential>
		</for>
	</target>

	<target name="deploy-portal-pom" depends="deploy-all-module">
		<pathconvert property="module.classpath.convert" refid="module.classpath" pathsep=" " />

		<java classname="CreatePOM" classpath="${basedir}/classes">
			<arg value="${groupId}" />
			<arg value="portal" />
			<arg value="${version}" />
			<arg value="pom" />
			<arg value="Liferay Portal" />
			<arg value="${portal.dir}" />

			<arg line="${module.list}" />
			<arg line="${module.classpath.convert}" />
		</java>

		<clean-up />
	</target>
</project>